---
import CategoryPosts from '@components/category-posts.astro'
import Container from '@components/container.astro'
import PostList from '@components/post-list.astro'
import Link from '@components/ui/link.astro'
import { categories } from '@data/category'
import Layout from '@layouts/Layout.astro'
import { latestPosts } from '@utils/content'
---

<Layout title="">
  <Container>
    <header class="mx-0 lg:mx-20">
      <div
        class="mb-14 flex flex-col items-center justify-between gap-10 md:flex-row">
        <div
          class="flex flex-col items-start w-full lg:w-1/2 max-lg:items-center">
          <h1
            class="mt-2 mb-3 text-3xl font-semibold tracking-tight text-center lg:leading-snug text-brand-primary lg:text-4xl dark:text-white">
            Hi, I'm Jeremy. <span class="wave">üëã</span>
          </h1>
          <p
            class="text-lg text-gray-600 dark:text-gray-400 text-center px-4 md:text-left md:px-0">
            Director of AI & Threat Analytics at <a
              href="https://keepersecurity.com"
              target="_blank"
              rel="noopener noreferrer"
              class="hover:text-blue-500
            dark:hover:text-orange-500"
              >Keeper Security</a
            >. I build ML systems, secure products, and developer tools. I write
            about machine learning, security, and full-stack engineering.
          </p>

          <ul
            class="mt-4 grid grid-cols-1 gap-4 text-md text-gray-500 dark:text-gray-400 md:grid-cols-2">
            <li class="text-yellow-800 dark:text-yellow-200">
              +10 Years of Experience
            </li>
            <li class="text-red-800 dark:text-red-200">üìç Denver, Colorado</li>
            <li class="text-sky-800 dark:text-sky-200">
              üîê Exploring & building SOTA ML, LLM, and VLM models
            </li>
            <li class="text-gray-600 dark:text-gray-100">
              ü§è Small models, edge deployments
            </li>
          </ul>

          <div class="flex flex-wrap mt-8 space-x-3">
            <Link href="/blog">Blog Posts</Link>
            <Link href="/about" style="outline">About me</Link>
          </div>
        </div>

        <figure class="cool-profile">
          <img
            src="/images/jeremy.webp"
            alt="Jeremy's profile picture"
            class="shadow-md"
          />
        </figure>
      </div>
    </header>

    <main>
      <h2
        class="text-2xl pt-7 font-semibold tracking-tight text-center lg:leading-snug text-brand-primary lg:text-3xl dark:text-white">
        Latest posts
      </h2>
      <div class="grid gap-10 pt-7 lg:gap-10 md:grid-cols-2">
        {
          latestPosts
            .slice(0, 2)
            .map((post) => (
              <PostList post={post} aspect="landscape" preloadImage={true} />
            ))
        }
      </div>
      <div class="grid gap-10 mt-10 lg:gap-10 md:grid-cols-2 xl:grid-cols-2">
        {
          latestPosts
            .slice(2, 5)
            .map((post) => <PostList post={post} aspect="square" />)
        }
      </div>

      <div class="flex justify-center mt-7 mb-7">
        <a
          href="/blog"
          class="px-5 py-3 text-sm text-blue-600 transition rounded-md dark:text-orange-500 bg-orange-50 hover:bg-blue-200 dark:hover:bg-orange-200">
          ‚Üê View all posts
        </a>
      </div>

      <h2
        class="text-2xl pt-14 font-semibold tracking-tight text-center lg:leading-snug text-brand-primary lg:text-3xl dark:text-white">
        Posts by category
      </h2>

      {categories?.map((category) => <CategoryPosts category={category} />)}
    </main>
  </Container>
</Layout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const reduce = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;

    // Profile intro animation (runs once)
    const profile = document.querySelector(".cool-profile");
    if (!profile || reduce) return;

    // Phase 1: run the intro animation once
    profile.classList.add("intro-anim");

    const introMs = 3400; // 0.4s hoverPop + 3.0s slick-hover*
    const exitMs = 550; // fade/settle duration

    let exitTimer, clearAll;

    const startExit = () => {
      // Phase 2: fade/settle to rest instead of "jumping"
      profile.classList.add("intro-exit");
      exitTimer = setTimeout(() => {
        profile.classList.remove("intro-anim", "intro-exit");
      }, exitMs);
    };

    const introTimer = setTimeout(startExit, introMs);

    // If the user hovers during the intro/exit, hand control to :hover immediately
    clearAll = () => {
      clearTimeout(introTimer);
      clearTimeout(exitTimer);
      profile.classList.remove("intro-anim", "intro-exit");
      profile.removeEventListener("mouseenter", clearAll);
    };
    profile.addEventListener("mouseenter", clearAll);

    const wave = document.querySelector("h1 .wave");
    if (wave && !reduce) {
      wave.classList.add("intro-wave");

      const waveIntroMs = 3000; // matches animation duration
      const waveExitMs = 450; // fade/settle duration

      let waveExitTimer;

      const startWaveExit = () => {
        wave.classList.add("intro-exit");
        waveExitTimer = setTimeout(() => {
          wave.classList.remove("intro-wave", "intro-exit");
        }, waveExitMs);
      };

      const waveIntroTimer = setTimeout(startWaveExit, waveIntroMs);

      // If user hovers during intro/exit, hand over to :hover immediately
      const cancelWaveIntro = () => {
        clearTimeout(waveIntroTimer);
        clearTimeout(waveExitTimer);
        wave.classList.remove("intro-wave", "intro-exit");
        wave.removeEventListener("mouseenter", cancelWaveIntro);
      };
      wave.addEventListener("mouseenter", cancelWaveIntro);
    }
  });
</script>
