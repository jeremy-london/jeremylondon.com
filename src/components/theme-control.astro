---
import { Icon } from 'astro-icon/components'

interface Props {
  variant?: 'icon' | 'dropdown'
  size?: 'sm' | 'md' // icon button only
  class?: string // extra classes on root/button wrapper
  showLabel?: boolean // dropdown only
}

const {
  variant = 'icon',
  size = 'md',
  class: className = '',
  showLabel = true,
} = Astro.props

const tcId = `tc-${Math.random().toString(36).slice(2, 10)}`
const tcSizeMap = { sm: 'h-8 w-8', md: 'h-9 w-9' } as const
const tcBtnSize = tcSizeMap[size]
---

<div data-tc-root data-tc-id={tcId} class={variant === "dropdown" ? `inline-flex items-center gap-3 ${className}` : className}>
  {variant === "dropdown" ? (
    <>
      {showLabel && <span class="text-sm font-medium text-gray-600 dark:text-gray-300">Theme</span>}
      <div class="relative">
        <select
          data-role="select"
          class="peer h-9 w-36 appearance-none rounded-lg border border-gray-200 bg-white/70 pl-3 pr-9 text-sm text-gray-800 shadow-sm outline-none transition
                 hover:bg-white/90 focus-visible:ring-2 focus-visible:ring-blue-500/50 focus-visible:border-blue-400 cursor-pointer
                 dark:border-white/10 dark:bg-white/5 dark:text-gray-100 dark:hover:bg-white/10 dark:focus-visible:ring-orange-500/50 dark:focus-visible:border-orange-400"
        >
          <option value="system">System</option>
          <option value="dark">Dark</option>
          <option value="light">Light</option>
        </select>
        <Icon
          name="heroicons-outline:chevron-down"
          class="pointer-events-none absolute right-2.5 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400 transition peer-focus-visible:text-blue-500 dark:peer-focus-visible:text-orange-400"
          aria-hidden="true"
        />
      </div>
    </>
  ) : (
    <button
      type="button"
      aria-label="Toggle theme"
      data-role="button"
      data-resolved="light"
      class={`tc-btn inline-flex items-center justify-center rounded-xl border border-gray-200 bg-white/70 text-gray-700 shadow-sm outline-none transition
              hover:bg-white/90 focus-visible:ring-2 focus-visible:ring-blue-500/50 focus-visible:border-blue-400 cursor-pointer
              dark:border-white/10 dark:bg-white/5 dark:text-gray-100 dark:hover:bg-white/10 dark:focus-visible:ring-orange-500/50 dark:focus-visible:border-orange-400
              ${tcBtnSize} ${className}`}
    >
      <Icon name="heroicons-outline:sun"  class="sun h-5 w-5" />
      <Icon name="heroicons-outline:moon" class="moon h-5 w-5" />
    </button>
  )}
</div>

{variant === "icon" && (
  <style>
    .tc-btn .sun { display: inline-block; }
    .tc-btn .moon { display: none; }
    .tc-btn[data-resolved="dark"] .sun { display: none; }
    .tc-btn[data-resolved="dark"] .moon { display: inline-block; }
  </style>
)}

<script is:inline data-tc-id={tcId}>
(() => {
  const tcId = document.currentScript.getAttribute("data-tc-id");
  const rootEl = document.querySelector(`[data-tc-id="${tcId}"]`);

  const selectEl = rootEl.querySelector('[data-role="select"]');
  const buttonEl = rootEl.querySelector('[data-role="button"]');
  const htmlEl   = document.documentElement;

  const getResolved   = () => htmlEl.getAttribute('data-theme') || 'light';        // 'light' | 'dark'
  const getPreference = () => htmlEl.getAttribute('data-theme-preference') || '';  // 'light' | 'dark' | '' (system)

  function dispatchSetTheme(mode) {
    try {
      if (mode == null) document.dispatchEvent(new CustomEvent('set-theme', null));
      else document.dispatchEvent(new CustomEvent('set-theme', { detail: mode }));
    } catch {
      document.dispatchEvent(new CustomEvent('set-theme', mode == null ? {} : { detail: mode }));
    }
  }

  function syncUI() {
    const resolved = getResolved();
    const pref = getPreference(); // '' => system
    if (buttonEl) buttonEl.setAttribute('data-resolved', resolved);
    if (selectEl) selectEl.value = pref || 'system';
  }

  // init
  syncUI();

  if (selectEl) {
    selectEl.addEventListener('change', (ev) => {
      const val = (ev.target && ev.target.value) || selectEl.value || 'system';
      dispatchSetTheme(val === 'system' ? null : val);
    });
  }

  if (buttonEl) {
    buttonEl.addEventListener('click', () => {
      const next = (buttonEl.getAttribute('data-resolved') === 'dark') ? 'light' : 'dark';
      buttonEl.setAttribute('data-resolved', next); // instant feedback
      dispatchSetTheme(next);
    });
  }

  const observer = new MutationObserver(syncUI);
  observer.observe(htmlEl, { attributes: true, attributeFilter: ['data-theme', 'data-theme-preference'] });
})();
</script>
