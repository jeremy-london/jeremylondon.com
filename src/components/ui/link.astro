---
interface Props {
  href: string;
  size?: "md" | "lg" | "unset";
  block?: boolean;
  style?: "outline" | "primary" | "inverted" | "underline" | "muted" | "icon";
  class?: string;
  umamiEvent?: string;
  [x: string]: any;
}

const {
  href,
  block,
  size = "lg",
  style = "primary",
  class: className,
  umamiEvent,
  ...rest
} = Astro.props;

const sizes = {
  lg: "px-5 py-2.5",
  md: "px-4 py-2",
  unset: "",
};

const styles = {
  outline:
    "bg-white border-2 border-black hover:shadow-xl text-black dark:bg-transparent dark:border-white dark:text-white dark:hover:bg-gray-800",
  primary:
    "bg-black text-white hover:bg-gray-800 hover:shadow-xl  border-2 border-transparent dark:bg-white dark:text-black dark:hover:bg-gray-200",
  inverted: "bg-white text-black hover:shadow-xl  border-2 border-transparent",
  underline: "nav-link after:dark:bg-orange-500",
  icon: "no-underline",
  muted:
    "bg-gray-100 hover:bg-gray-200 hover:shadow-xl  border-2 border-transparent",
};
---

<a
  href={href}
  {...rest}
  data-umami-event={umamiEvent}
  class:list={[
    "rounded text-center  transition focus-visible:ring-2 ring-offset-2 ring-gray-200",
    block && "w-full",
    sizes[size],
    styles[style],
    className,
  ]}
  ><slot />
</a>

<style type="text/tailwindcss">
  @reference "../../styles/global.css";

  @layer utilities {
    .nav-link {
      @apply relative my-2 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-300;
    }
    .nav-link::after {
      @apply content-[''] bg-blue-500 h-[3.5px] w-[0%] left-0 -bottom-[6px] rounded-md absolute duration-300;
    }

    .nav-link:hover::after {
      @apply w-[100%];
    }
  }
</style>
